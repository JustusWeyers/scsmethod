[{"name":"server.R","content":"#\r\n# This is the server logic of a Shiny web application. You can run the\r\n# application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\n\r\n# Define server logic required to draw a histogram\r\nfunction(input, output, session) {\r\n  \r\n  ### Reactive values\r\n  \r\n  # Input values\r\n  in_vals = shiny::reactiveValues(\r\n    P = demo_P,\r\n    soilclasses = demo_soilclasses,\r\n    precipitation = 95,\r\n    duration = 10,\r\n    landuse_class = demo_landuse,\r\n    landuse_area = demo_area\r\n  )\r\n  \r\n  # Operating values\r\n  vals = shiny::reactiveValues()\r\n  \r\n  ### Serverlogic: Input\r\n  \r\n  # Update in_vals precipitation data.frame\r\n  shiny::observe({\r\n    if (!is.null(input$ui_P)) {\r\n      in_vals[[\"P\"]] = rhandsontable::hot_to_r(input$ui_P)\r\n    }\r\n  })\r\n  \r\n  # Update in_vals soilclasses data.frame\r\n  shiny::observe({\r\n    if (!is.null(input$ui_soilclasses)) {\r\n      in_vals[[\"soilclasses\"]] = rhandsontable::hot_to_r(input$ui_soilclasses)\r\n    }\r\n  })\r\n  \r\n  # Load demodata\r\n  shiny::observeEvent(input$demo_data, {\r\n    in_vals$P = demo_P\r\n    in_vals$soilclasses = demo_soilclasses\r\n    in_vals$precipitation = 95\r\n    in_vals$duration = 10\r\n    in_vals$landuse_class = demo_landuse\r\n    in_vals$landuse_area = demo_area\r\n  })\r\n  \r\n  # Append a land use class and area\r\n  shiny::observeEvent(input$add_landuse, {\r\n    if (!(input$landuse %in% unlist(in_vals$landuse_class))) {\r\n      in_vals$landuse_class = append(in_vals$landuse_class, input$landuse)\r\n      in_vals$landuse_area = append(in_vals$landuse_area, input$landuse_ha)\r\n    }\r\n  })\r\n  \r\n  # Clear landuse list\r\n  shiny::observeEvent(input$clear_landuse, {\r\n    in_vals$landuse_class = c()\r\n    in_vals$landuse_area = c()\r\n  })\r\n\r\n  # Clear input  \r\n  shiny::observeEvent(input$clear_input, {\r\n    in_vals$P = empty_df(r = 10, c = 2, cn = c(\"t\", \"P\"))\r\n    in_vals$soilclasses = empty_df(r = 4, c = 1, cn = c(\"area\"))\r\n    row.names(in_vals$soilclasses) = c(\"A\", \"B\", \"C\", \"D\")\r\n    in_vals$precipitation = 0\r\n    in_vals$duration = 0\r\n    in_vals$landuse_class = c()\r\n    in_vals$landuse_area = c()\r\n    \r\n    vals$P = NULL\r\n    vals$soil_classes = NULL\r\n    soilA = NULL\r\n    soilB = NULL\r\n    soilC = NULL\r\n    soilD = NULL\r\n  })\r\n  \r\n  ### Serverlogic: Main functionality\r\n  \r\n  shiny::observeEvent(input$run, {\r\n    if (TRUE) {\r\n      vals$P = in_vals$P\r\n      vals$soilclasses = in_vals$soilclasses\r\n      \r\n      vals$soilA = calculate_CurveNumber(\r\n        sclass        = \"A\",\r\n        pp            = in_vals$soilclasses[1,1],\r\n        lu_class      = in_vals$landuse_class,\r\n        lu            = in_vals$landuse_area,\r\n        SCS_CN_values = scs_classification\r\n      )\r\n      \r\n      vals$soilB = calculate_CurveNumber(\r\n        sclass        = \"B\",\r\n        pp            = in_vals$soilclasses[2,1],\r\n        lu_class      = in_vals$landuse_class,\r\n        lu            = in_vals$landuse_area,\r\n        SCS_CN_values = scs_classification\r\n      )\r\n      \r\n      vals$soilC = calculate_CurveNumber(\r\n        sclass        = \"C\",\r\n        pp            = in_vals$soilclasses[3,1],\r\n        lu_class      = in_vals$landuse_class,\r\n        lu            = in_vals$landuse_area,\r\n        SCS_CN_values = scs_classification\r\n      )\r\n      \r\n      vals$soilD = calculate_CurveNumber(\r\n        sclass        = \"D\",\r\n        pp            = in_vals$soilclasses[4,1],\r\n        lu_class      = in_vals$landuse_class,\r\n        lu            = in_vals$landuse_area,\r\n        SCS_CN_values = scs_classification\r\n      )\r\n      \r\n    }\r\n  })\r\n  \r\n  dt = shiny::reactive(\r\n    # Delta t in seconds\r\n    unique(diff(vals$P$t)) * 3600\r\n  )\r\n  \r\n  ### Output\r\n  \r\n  output$landuse_boxarray = shiny::renderUI({\r\n    if (length(in_vals$landuse_class)> 0) {\r\n      lapply(\r\n        X = 1:length(in_vals$landuse_class), \r\n        FUN = arraybox, \r\n        class = in_vals$landuse_class, \r\n        area = in_vals$landuse_area\r\n      )\r\n    }\r\n  })\r\n  \r\n  output$ui_P = rhandsontable::renderRHandsontable(\r\n    rhandsontable::rhandsontable(\r\n      data = in_vals[[\"P\"]], \r\n      useTypes = TRUE, \r\n      stretchH = \"all\"\r\n    )\r\n  )\r\n  \r\n  output$ui_soilclasses = rhandsontable::renderRHandsontable(\r\n    rhandsontable::rhandsontable(\r\n      data = in_vals[[\"soilclasses\"]], \r\n      useTypes = TRUE, \r\n      stretchH = \"all\",\r\n    ) |>\r\n    rhandsontable::hot_context_menu(\r\n      allowRowEdit = FALSE, \r\n      allowColEdit = FALSE\r\n    )\r\n  )\r\n  \r\n  output$ui_dInput = shiny::renderUI(\r\n    shinydashboard::box(\r\n      solidHeader = FALSE, width = 12, title = \"Duration [h]\",\r\n      shiny::numericInput(\r\n        inputId = \"p_duration\", \r\n        label = NULL, \r\n        value = in_vals$duration, \r\n        min = 0\r\n      )\r\n    )\r\n  )\r\n  \r\n  output$ui_pInput = shiny::renderUI(\r\n    shinydashboard::box(\r\n      solidHeader = FALSE, width = 12, title = \"Precipitation [mm]\",\r\n      shiny::numericInput(\r\n        inputId = \"p\", \r\n        label = NULL, \r\n        value = in_vals$precipitation, \r\n        min = 0\r\n      )\r\n    )\r\n  )\r\n  \r\n  output$ui_select_landuse = shiny::renderUI(\r\n    shiny::fluidRow(\r\n      tags$style(\r\n        type='text/css', \r\n        \".selectize-input { font-size: 10px; line-height: 20px;} \r\n        .selectize-dropdown { font-size: 10px; line-height: 10px; }\"\r\n      ),\r\n      shiny::selectInput(\r\n        inputId = \"landuse\",\r\n        label = \"Select landuse\",\r\n        choices = trimws(scs_classification$use),\r\n        selected = FALSE,\r\n        width = \"100%\"\r\n      )\r\n    )\r\n  )\r\n  \r\n  output$soiltypeA_table = shiny::renderUI(\r\n    if (!is.null(vals$soilA)) {\r\n      shiny::tagList(\r\n        p(\r\n          \"Table 3: Curve Number (CN) for soil class A. (A_LU: Area of landuse \r\n          class in ha, A: Area of soiltype A for related landuse in percent). \r\n          The CN is equal to the sum of 'A*CN'-column. All calculations have \r\n          been performed without rounded values.\"\r\n        ),\r\n        shiny::renderTable(\r\n          sumrow(vals$soilA)\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$soiltypeB_table = shiny::renderUI(\r\n    if (!is.null(vals$soilB)) {\r\n      shiny::tagList(\r\n        p(\r\n          \"Table 4: Curve Number (CN) for soil class B. (A_LU: Area of landuse \r\n          class in ha, A: Area of soiltype B for related landuse in percent). \r\n          The CN is equal to the sum of 'A*CN'-column. All calculations have \r\n          been performed without rounded values.\"\r\n        ),\r\n        shiny::renderTable(\r\n          sumrow(vals$soilB)\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$soiltypeC_table = shiny::renderUI(\r\n    if (!is.null(vals$soilC)) {\r\n      shiny::tagList(\r\n        p(\r\n          \"Table 5: Curve Number (CN) for soil class C. (A_LU: Area of landuse \r\n          class in ha, A: Area of soiltype C for related landuse in percent). \r\n          The CN is equal to the sum of 'A*CN'-column. All calculations have \r\n          been performed without rounded values.\"\r\n        ),\r\n        shiny::renderTable(\r\n          sumrow(vals$soilC)\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$soiltypeD_table = shiny::renderUI(\r\n    if (!is.null(vals$soilD)) {\r\n      shiny::tagList(\r\n        p(\r\n          \"Table 6: Curve Number (CN) for soil class D. (A_LU: Area of landuse \r\n          class in ha, A: Area of soiltype D for related landuse in percent). \r\n          The CN is equal to the sum of 'A*CN'-column. All calculations have \r\n          been performed without rounded values.\"\r\n        ),\r\n        shiny::renderTable(\r\n          sumrow(vals$soilD)\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$calculations = shiny::renderUI(\r\n    if (!is.null(vals$soilA)) {\r\n      shiny::fluidRow(\r\n        col_12(\r\n          h2(\"Calculations\"),\r\n          col_6(\r\n            shiny::uiOutput(\"soiltypeA_table\")\r\n          ),\r\n          col_6(\r\n            shiny::uiOutput(\"soiltypeB_table\")\r\n          ),\r\n          col_6(\r\n            shiny::uiOutput(\"soiltypeC_table\")\r\n          ),\r\n          col_6(\r\n            shiny::uiOutput(\"soiltypeD_table\")\r\n          )\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n}\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of a Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nfluidPage(\r\n  \r\n  ### Title \"Muskingum Application\"\r\n  \r\n  shiny::fluidRow(\r\n    shiny::titlePanel(\"SCS Method\")\r\n  ),\r\n  \r\n  \r\n  ### Data input\r\n  \r\n  h2(\"Data input\"),\r\n\r\n  shiny::fluidRow(\r\n    col_4(\r\n      shinydashboard::box(\r\n        title = \"Design precipitation\", width = 12,\r\n        p(\r\n          \"Table 1: Fill-in table for share of precipitation duration and \r\n          amount.\"\r\n        ),\r\n        rhandsontable::rHandsontableOutput(\"ui_P\")\r\n      ),\r\n      shinydashboard::box(\r\n        title = \"Soil classes\", width = 12,\r\n        p(\r\n          \"Table 2: Area of the corresponding soil classes [%].\"\r\n        ),\r\n        rhandsontable::rHandsontableOutput(\"ui_soilclasses\")\r\n      )\r\n    ),\r\n    col_8(\r\n      shinydashboard::box(\r\n        title = \"Landuse\", width = 12,\r\n        p(\"List 1: Landuse by SCS categories in ha.\"),\r\n        col_12(\r\n          shiny::uiOutput(outputId = \"landuse_boxarray\")\r\n        ),\r\n        col_6(\r\n          shiny::uiOutput(outputId = \"ui_select_landuse\"),\r\n        ),\r\n        col_2(\r\n          shiny::numericInput(\r\n            inputId = \"landuse_ha\", \r\n            label = \"Area [ha]\", \r\n            value = 1, \r\n            min = 0, \r\n            width = \"100%\")\r\n        ),\r\n        col_2(\r\n          tags$div(\r\n            tags$label(\"Actions:\", style=\"color: transparent\"),\r\n            tags$div(\r\n              shiny::actionButton(\r\n                inputId = \"add_landuse\", \r\n                label = \"\", \r\n                icon = shiny::icon(\"plus\"), \r\n                width = \"100%\"\r\n              ),\r\n            )\r\n          )\r\n        ),\r\n        col_2(\r\n          tags$div(\r\n            tags$label(\"Actions:\", style=\"color: transparent\"),\r\n            tags$div(\r\n              shiny::actionButton(\r\n                inputId = \"clear_landuse\", \r\n                label = \"\", \r\n                icon = shiny::icon(\"trash\"), \r\n                width = \"100%\"\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  ),\r\n  \r\n  shiny::fluidRow(\r\n    col_3(\r\n      shiny::uiOutput(\"ui_dInput\")\r\n    ),\r\n    col_3(\r\n      shiny::uiOutput(\"ui_pInput\")\r\n    ),\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Actions\", width = 12,\r\n        shiny::actionButton(\r\n          inputId = \"clear_input\", \r\n          label = \"Clear input\"\r\n        ),\r\n        shiny::actionButton(\r\n          inputId = \"demo_data\", \r\n          label = \"Use demo data\"\r\n        ),\r\n        shiny::actionButton(\r\n          inputId = \"run\", \r\n          label = \"Run\", \r\n          class = \"btn-warning\"\r\n        )\r\n      )\r\n    )\r\n  ),\r\n  \r\n  ### Calculations\r\n  \r\n  shiny::uiOutput(\"calculations\")\r\n  \r\n)\r\n","type":"text"},{"name":"functions.R","content":"empty_df = function(r, c, cn) {\r\n  df = data.frame(matrix(NA_real_, nrow = r, ncol = c))\r\n  colnames(df) = cn\r\n  return(df)\r\n}\r\n\r\narraybox = function(i, class, area) {\r\n  shinydashboard::box(\r\n    solidHeader = TRUE, width = \"100%\",\r\n    col_10(\r\n      p(class[i])\r\n    ),\r\n    col_2(\r\n      p(area[i])\r\n    )\r\n  )\r\n}\r\n\r\ncalculate_CurveNumber = function(sclass, pp, lu_class, lu_area, SCS_CN_values) {\r\n  df = data.frame(\r\n    LU = paste0(substr(lu_class, start = 1, stop = 15), \"...\"),\r\n    A_LU = lu_area,\r\n    A_LU_p = lu_area/sum(lu_area) * 100\r\n  )\r\n  \r\n  df$A = lu_area/sum(lu_area) * pp\r\n  df$CN = sapply(lu_class, FUN = function(lu) {\r\n    SCS_CN_values[which(SCS_CN_values$use == lu), sclass]\r\n  })\r\n  df$ACN = df[,4]/100 * df$CN\r\n  \r\n  colnames(df)[1] = paste0(\"Soil class \", sclass, \" (\", pp, \"%)\")\r\n  \r\n  return(df)\r\n}\r\n\r\nsumrow = function(df, sclass) {\r\n  \r\n  csum = colSums(df[,2:6])\r\n  \r\n  df[,3] = round(df[,3], 2)\r\n  df[,4] = round(df[,4], 2)\r\n  df[,5] = as.integer(df[,5])\r\n  df[,6] = round(df[,6], 2)\r\n  \r\n  df[nrow(df)+1,] = c(\"Sum:\" , csum[1:3], \"-\", round(csum[5], 2))\r\n  \r\n  colnames(df)[2:6] = c(\r\n    \"A_LU [ha]\",\r\n    \"A_LU [%]\",\r\n    \"A [%]\",\r\n    \"CN\",\r\n    \"A*CN\"\r\n  )\r\n    \r\n  return(df)\r\n  \r\n}\r\n\r\ncol_1 = function(...) {\r\n  shiny::column(1, ...)\r\n}\r\n\r\ncol_2 = function(...) {\r\n  shiny::column(2, ...)\r\n}\r\n\r\ncol_3 = function(...) {\r\n  shiny::column(3, ...)\r\n}\r\n\r\ncol_4 = function(...) {\r\n  shiny::column(4, ...)\r\n}\r\n\r\ncol_6 = function(...) {\r\n  shiny::column(6, ...)\r\n}\r\n\r\ncol_8 = function(...) {\r\n  shiny::column(8, ...)\r\n}\r\n\r\ncol_9 = function(...) {\r\n  shiny::column(9, ...)\r\n}\r\n\r\ncol_10 = function(...) {\r\n  shiny::column(10, ...)\r\n}\r\n\r\ncol_12 = function(...) {\r\n  shiny::column(12, ...)\r\n}\r\n","type":"text"},{"name":"global.R","content":"\r\ndemo_P = data.frame(\r\n  t = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0),\r\n  P = c(0.02, 0.04, 0.10, 0.14, 0.16, 0.16, 0.14, 0.10, 0.04, 0.02)\r\n)\r\n\r\ndemo_soilclasses = data.frame(\r\n  area = c(10, 40, 30, 20)\r\n)\r\nrow.names(demo_soilclasses) = c(\"A\", \"B\", \"C\", \"D\")\r\n\r\ndemo_landuse = c(\r\n  \"Wohngebiete (Mittl. Grundstücksgröße bis 1000m^2, Versiegelungsgrad: 38%)\",\r\n  \"Straßen (asphaltiert mit Randstein und Abwasserkanalisation)\",\r\n  \"Wald (kein Mulch, gute Bodenbedeckung)\",\r\n  \"Wiese (in gutem Zustand)\",\r\n  \"Weideland (in schlechtem Zustand)\",\r\n  \"Landwirtschaftlich genutzte Ackerfläche (ohne Erosionsschutzmaßnahmen)\"\r\n)\r\n\r\ndemo_area = c(6, 4, 12, 7, 6, 8)\r\n\r\nscs_classification = data.frame(\r\n  use = c(\r\n    \"Landwirtschaftlich genutzte Ackerfläche (mit Erosionsschutzmaßnahmen)\",\r\n    \"Landwirtschaftlich genutzte Ackerfläche (ohne Erosionsschutzmaßnahmen)\",\r\n    \"Weideland (in schlechtem Zustand)\",\r\n    \"Weideland (in gutem Zustand)\",\r\n    \"Wiese (in gutem Zustand)\",\r\n    \"Wald (lichter Bestand, schlechte Bodendeckung)\",\r\n    \"Wald (kein Mulch, gute Bodenbedeckung)\",\r\n    \"Rasen, Parks, Golfplätze, Friedhöfe etc. (guter Zustand, Grasbewuchs auf 75 % der Fläche)\",\r\n    \"Rasen, Parks, Golfplätze, Friedhöfe etc. (mäßiger Zustand, Grasbw. auf 50–75% der Fläche)\",\r\n    \"Städt. Wohn- und Geschäftsviertel (85% Versiegelungsgrad)\",\r\n    \"Industriegebiete (72% Versiegelungsgrad)\",\r\n    \"Wohngebiete (Mittl. Grundstücksgröße bis 500m^2, Versiegelungsgrad: 65%)\",\r\n    \"Wohngebiete (Mittl. Grundstücksgröße bis 1000m^2, Versiegelungsgrad: 38%)\",\r\n    \"Wohngebiete (Mittl. Grundstücksgröße bis 1500m^2, Versiegelungsgrad: 30%)\",\r\n    \"Wohngebiete (Mittl. Grundstücksgröße bis 2000m^2, Versiegelungsgrad: 25%)\",\r\n    \"Wohngebiete (Mittl. Grundstücksgröße bis 4000m^2, Versiegelungsgrad: 20%)\",\r\n    \"Asphaltierte Flächen, Parkplätze, Einfahrten, Dächer\",\r\n    \"Straßen (asphaltiert mit Randstein und Abwasserkanalisation)\",\r\n    \"Straßen (Schotterstraßen)\",\r\n    \"Straßen (Erdstraßen)\"\r\n  ),\r\n  A = c(72, 62, 68, 39, 30, 45, 25, 39, 49, 89, 81, 77, 61, 57, 54, 51, 98, 98, 76, 72),\r\n  B = c(81, 71, 79, 61, 58, 66, 55, 61, 69, 92, 88, 85, 75, 72, 70, 68, 98, 98, 85, 82),\r\n  C = c(88, 78, 86, 74, 71, 77, 70, 74, 79, 94, 91, 90, 83, 81, 80, 79, 98, 98, 89, 87),\r\n  D = c(91, 81, 89, 80, 78, 83, 77, 80, 84, 95, 93, 92, 87, 86, 85, 84, 98, 98, 91, 89)\r\n)\r\n\r\n\r\nsource(\"functions.R\")\r\n","type":"text"}]
